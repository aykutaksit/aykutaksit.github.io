name: Weekly refresh publications

on:
  schedule:
    # Sunday 04:00 UTC  (≈ Sat midnight US-ET)
    - cron: '0 4 * * 0'
  workflow_dispatch:

permissions:
  contents: write        # allow the action to push changes

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1 – check out repo
      - uses: actions/checkout@v4

      # 2 – set up Python
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      # 3 – fetch Google Scholar via SerpAPI, update pubs.bib and publications.html
      - name: Fetch Scholar and update publications
        env:
          SERPAPI_KEY: ${{ secrets.SERPAPI_KEY }}
        run: |
          pip install requests bibtexparser==1.4.3

          python - <<'PY'
          import requests, os, pathlib, datetime, bibtexparser, html

          AUTHOR_ID = "thCuEKEAAAAJ"
          API_KEY   = os.environ["SERPAPI_KEY"]
          ROOT      = pathlib.Path(".")

          # -- step 1 fetch author’s article list --
          auth_json = requests.get(
              "https://serpapi.com/search.json",
              params={
                  "engine":    "google_scholar_author",
                  "author_id": AUTHOR_ID,
                  "num":       100,
                  "api_key":   API_KEY,
              },
              timeout=30
          ).json()

          bib_entries = []

          # -- step 2 loop over articles, fetch BibTeX --
          for art in auth_json.get("articles", []):
              cid = art.get("citation_id")
              if not cid:
                  continue
              short_id = cid.split(":")[-1]
              q_param  = f"info:{short_id}:scholar.google.com"  # exact format SerpAPI needs

              cite_json = requests.get(
                  "https://serpapi.com/search.json",
                  params={
                      "engine": "google_scholar_cite",
                      "q":      q_param,
                      "api_key": API_KEY
                  },
                  timeout=30
              ).json()

              links = cite_json.get("citations")
              if not links:
                  print("skip", short_id, "- no BibTeX link")
                  continue

              bib_url = links[0]["link"]
              bib_text = requests.get(bib_url, timeout=30).text.strip()
              bib_entries.append(bib_text)

          +if not bib_entries:
              print("No BibTeX entries fetched; leaving current list unchanged.")
              exit(0)

          # -- step 3 write pubs.bib --
          (ROOT / "pubs.bib").write_text(
              "% auto-generated "
              f"{datetime.date.today()}\n\n" +
              "\n\n".join(bib_entries) + "\n",
              encoding="utf-8"
          )

          # -- step 4 render simple HTML list --
          db = bibtexparser.loads("\n\n".join(bib_entries))
          items = []
          for entry in sorted(db.entries, key=lambda x: x.get("year", ""), reverse=True):
              title   = html.escape(entry.get("title", "").rstrip("."))
              journal = html.escape(entry.get("journal", ""))
              year    = entry.get("year", "")
              items.append(
                  f"<li class='mb-2'>{title}. <em>{journal}</em> ({year}).</li>"
              )
          ul_block = "<ul class='list-disc ml-6'>\n" + "\n".join(items) + "\n</ul>"

          # -- step 5 inject into publications.html between markers --
          html_path = ROOT / "publications.html"
          html_src  = html_path.read_text()
          start = html_src.find("<!-- PUBLIST-START -->")
          end   = html_src.find("<!-- PUBLIST-END -->")
          if start == -1 or end == -1:
              raise SystemExit("Marker comments not found in publications.html")

          new_html = (
              html_src[:start] +
              "<!-- PUBLIST-START -->\n" +
              ul_block +
              "\n<!-- PUBLIST-END -->" +
              html_src[end + len("<!-- PUBLIST-END -->"):]
          )
          html_path.write_text(new_html, encoding="utf-8")
          PY

      # 4 – commit only if something changed
      - name: Commit and push if changed
        run: |
          git config user.name  "github-actions"
          git config user.email "actions@users.noreply.github.com"
          git add pubs.bib publications.html
          git diff --cached --quiet || git commit -m "auto: refresh publication list"
          git push
