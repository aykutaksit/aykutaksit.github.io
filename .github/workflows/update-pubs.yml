name: Weekly refresh pubs.bib

on:
  schedule:
    - cron: '0 4 * * 0'     # Sun 04:00 UTC  (≈ Sat midnight ET)
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Fetch latest Google Scholar → pubs.bib
        run: |
          pip install scholarly==1.7.11
          python - <<'PY'
          from scholarly import scholarly, ProxyGenerator
          import pathlib, datetime, sys, traceback, textwrap

          USER_ID  = "thCuEKEAAAAJ"            # Aykut Aksit
          OUTFILE  = pathlib.Path("pubs.bib")
          today    = datetime.date.today()

          def fetch(use_proxy: bool) -> list[str] | None:
              """Return list of BibTeX strings or None on failure."""
              try:
                  if use_proxy:
                      pg = ProxyGenerator()
                      if not pg.FreeProxies():
                          raise RuntimeError("no free proxies found")
                      scholarly.use_proxy(pg)
                  author = scholarly.fill(
                      scholarly.search_author_id(USER_ID),
                      sections=["publications"]
                  )
                  return [scholarly.bibtex(p) for p in author["publications"]]
              except Exception as e:
                  print(f"⚠️ fetch({'proxy' if use_proxy else 'direct'}) failed:", e)
                  print(traceback.format_exc())
                  return None

          # 1️⃣ try with proxy   2️⃣ then direct  3️⃣ give up
          bibs = fetch(use_proxy=True) or fetch(use_proxy=False)
          if not bibs:
              print("❌  Could not retrieve publications; leaving pubs.bib unchanged.")
              sys.exit(0)        # succeed workflow but skip commit

          new_text = textwrap.dedent(f\"\"\"\
              % auto-generated {today}
              
              {'\\n\\n'.join(bibs)}
              \"\"\").rstrip() + "\n"

          if OUTFILE.exists() and OUTFILE.read_text() == new_text:
              print("ℹ️  pubs.bib already up-to-date; nothing to commit.")
              sys.exit(0)

          OUTFILE.write_text(new_text, encoding="utf-8")
          print(f"✅  Wrote pubs.bib with {len(bibs)} entries")
          PY

      - name: Commit if pubs.bib changed
        run: |
          git config user.name  "github-actions"
          git config user.email "actions@users.noreply.github.com"
          git add pubs.bib
          git diff --cached --quiet || git commit -m "auto: update pubs.bib"
          git push
