name: Weekly refresh publications

on:
  schedule:
    - cron:  '0 4 * * 0'   # every Sun 04 UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with: { python-version: '3.x' }

    - name: Fetch Scholar and update publication list
      env: { SERPAPI_KEY: ${{ secrets.SERPAPI_KEY }} }
      run: |
        pip install requests bibtexparser==1.4.3

        python - <<'PY'
        import requests, os, pathlib, datetime, textwrap, bibtexparser, html

        AUTHOR = "thCuEKEAAAAJ"
        KEY    = os.environ["SERPAPI_KEY"]
        ROOT   = pathlib.Path(".")

        # — get articles —
        auth = requests.get(
            "https://serpapi.com/search.json",
            params={
                "engine":    "google_scholar_author",
                "author_id": AUTHOR,
                "num":       100,
                "api_key":   KEY,
            }, timeout=30).json()

        bibs = []
        for art in auth.get("articles", []):
            cid = art.get("citation_id")
            if not cid:
                continue
            short = cid.split(":")[-1]          # keep only last token

            cite = requests.get(
                "https://serpapi.com/search.json",
                params={
                    "engine": "google_scholar_cite",
                    "q":      short,
                    "api_key": KEY
                }, timeout=30).json()

            links = cite.get("citations")
            if not links:
                print("skip", short, "no BibTeX")
                continue

            bib_url = links[0]["link"]
            bibs.append(requests.get(bib_url, timeout=30).text.strip())

        if not bibs:
            raise SystemExit("No BibTeX entries fetched – aborting.")

        # — write pubs.bib —
        (ROOT / "pubs.bib").write_text(
            f"% auto-generated {datetime.date.today()}\n\n"
            + "\n\n".join(bibs) + "\n",
            encoding="utf-8")

        # — render simple HTML list —
        db = bibtexparser.loads("\n\n".join(bibs))
        items = []
        for e in sorted(db.entries, key=lambda x: x.get("year",""), reverse=True):
            title = html.escape(e.get("title","").rstrip("."))
            journal = html.escape(e.get("journal",""))
            year = e.get("year","")
            items.append(f"<li class='mb-2'>{title}. <em>{journal}</em> ({year}).</li>")
        ul = "<ul class='list-disc ml-6'>\n" + "\n".join(items) + "\n</ul>"

        # — inject between markers —
        html_path = ROOT / "publications.html"
        src = html_path.read_text()
        a = src.find("<!-- PUBLIST-START -->")
        b = src.find("<!-- PUBLIST-END -->")
        new = src[:a] + "<!-- PUBLIST-START -->\n" + ul + "\n<!-- PUBLIST-END -->" + src[b+17:]
        html_path.write_text(new, encoding="utf-8")
        PY

    - name: Commit and push if changed
      run: |
        git config user.name  "github-actions"
        git config user.email "actions@users.noreply.github.com"
        git add pubs.bib publications.html
        git diff --cached --quiet || git commit -m "auto: refresh publication list"
        git push
